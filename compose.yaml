services:
  frontend:
    image: node:16.18
    platform: linux/x86_64
    container_name: ng_app_frontend
    build: ./front-end
    ports:
      - 3000:3000
    working_dir: /front-end
    volumes:
      - ./front-end:/front-end
    tty: true
    stdin_open: true
    command: bash
    restart: always
    depends_on:
      - backend
    networks:
      - virtual_wan_Front-to-Back

  backend:
    image: node:16.18
    platform: linux/x86_64
    container_name: ng_app_backend
    build: ./back-end
    working_dir: /back-end
    volumes:
      - ./back-end:/back-end
    tty: true
    stdin_open: true
    command: bash
    restart: always
    depends_on:
      - db
    ports:
      - 3001:3001
    environment:
      DB_USER: postgres
      DB_PASS: 2303
      DB_HOST: localhost
      DB_PORT: 5432
    networks:
      - virtual_wan_Front-to-Back
      - virtual_lan_Back-to-DB

  db:
    image: postgres
    platform: linux/x86_64
    container_name: ng_app_db
    restart: always
    ports:
      - 5432:5432
    environment:
      DB_USER: postgres
      DB_PASS: 2303
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: ng-cash
    networks:
      - virtual_lan_Back-to-DB
    cap_add:
      - SYS_NICE

networks:
  # The presence of these objects is sufficient to define them
  virtual_wan_Front-to-Back: {}
  virtual_lan_Back-to-DB: {}
# As chaves `tty`, `stdin_open` e `command` fazem com que o container fique
# rodando em segundo plano, bem como tornam possível o uso do comando
# `docker attach`, já deixando o terminal atual acoplado ao container, direto
# no bash. Apesar disso, utilizar o attach mais de uma vez irá replicar o
# terminal, portanto é melhor utilizar o comando `docker exec`.

# A renomeação da rede padrão é feita pois caso contrário o nome da rede será
# o nome do diretório onde o arquivo atual se encontra, o que pode dificultar
# a listagem individual.
